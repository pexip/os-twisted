From c1923d24b6a2752ea5d5686851427e0ec5757543 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:04:27 -0800
Subject: [PATCH] tests for domain/port/scheme and fix

---
 src/twisted/web/client.py          | 61 +++++++++++++++++++++---------
 src/twisted/web/test/test_agent.py | 52 ++++++++++++++++++++-----
 2 files changed, 86 insertions(+), 27 deletions(-)

--- a/src/twisted/web/client.py
+++ b/src/twisted/web/client.py
@@ -14,20 +14,17 @@ import warnings
 
 from urllib.parse import urljoin, urldefrag
 from urllib.parse import urlunparse as _urlunparse
+from typing import Iterable
 
-import zlib
 from functools import wraps
 
-from zope.interface import implementer
-
+import zlib
 from twisted.python.compat import _PY3, networkString
 from twisted.python.compat import nativeString, intToBytes, unicode, itervalues
-from twisted.python.deprecate import deprecatedModuleAttribute, deprecated
+from twisted.python.deprecate import deprecated, deprecatedModuleAttribute, getDeprecationWarningString
 from twisted.python.failure import Failure
 from incremental import Version
 
-from twisted.web.iweb import IPolicyForHTTPS, IAgentEndpointFactory
-from twisted.python.deprecate import getDeprecationWarningString
 from twisted.web import http
 from twisted.internet import defer, protocol, task, reactor
 from twisted.internet.abstract import isIPv6Address
@@ -36,11 +33,12 @@ from twisted.internet.endpoints import H
 from twisted.python.util import InsensitiveDict
 from twisted.python.components import proxyForInterface
 from twisted.web import error
-from twisted.web.iweb import UNKNOWN_LENGTH, IAgent, IBodyProducer, IResponse
 from twisted.web.http_headers import Headers
 from twisted.logger import Logger
 
 from twisted.web._newclient import _ensureValidURI, _ensureValidMethod
+from twisted.web.iweb import IAgent, IAgentEndpointFactory, IBodyProducer, IPolicyForHTTPS, IResponse, UNKNOWN_LENGTH
+from zope.interface import implementer
 
 
 
@@ -2089,6 +2087,15 @@ class ContentDecoderAgent(object):
 
 
 
+_canonicalHeaderName = Headers()._canonicalNameCaps
+_defaultSensitiveHeaders = frozenset([
+    b"Authorization",
+    b"Cookie",
+    b"Cookie2",
+    b"Proxy-Authorization",
+    b"WWW-Authenticate",
+])
+
 @implementer(IAgent)
 class RedirectAgent(object):
     """
@@ -2103,6 +2110,11 @@ class RedirectAgent(object):
     @param redirectLimit: The maximum number of times the agent is allowed to
         follow redirects before failing with a L{error.InfiniteRedirection}.
 
+    @param sensitiveHeaderNames: An iterable of C{bytes} enumerating the names
+        of headers that must not be transmitted when redirecting to a different
+        origins.  These will be consulted in addition to the protocol-specified
+        set of headers that contain sensitive information.
+
     @cvar _redirectResponses: A L{list} of HTTP status codes to be redirected
         for I{GET} and I{HEAD} methods.
 
@@ -2117,9 +2129,17 @@ class RedirectAgent(object):
     _seeOtherResponses = [http.SEE_OTHER]
 
 
-    def __init__(self, agent, redirectLimit=20):
+    def __init__(
+        self,
+        agent: IAgent,
+        redirectLimit: int = 20,
+        sensitiveHeaderNames: Iterable[bytes] = (),
+    ):
         self._agent = agent
         self._redirectLimit = redirectLimit
+        sensitive = set(_canonicalHeaderName(each) for each in sensitiveHeaderNames)
+        sensitive.update(_defaultSensitiveHeaders)
+        self._sensitiveHeaderNames = sensitive
 
 
     def request(self, method, uri, headers=None, bodyProducer=None):
@@ -2166,6 +2186,22 @@ class RedirectAgent(object):
                 response.code, b'No location header field', uri)
             raise ResponseFailed([Failure(err)], response)
         location = self._resolveLocation(uri, locationHeaders[0])
+        if headers:
+            parsedURI = URI.fromBytes(uri)
+            parsedLocation = URI.fromBytes(location)
+            sameOrigin = (
+                (parsedURI.scheme == parsedLocation.scheme)
+                and (parsedURI.host == parsedLocation.host)
+                and (parsedURI.port == parsedLocation.port)
+            )
+            if not sameOrigin:
+                headers = Headers(
+                    {
+                        rawName: rawValue
+                        for rawName, rawValue in headers.getAllRawHeaders()
+                        if rawName not in self._sensitiveHeaderNames
+                    }
+                )
         deferred = self._agent.request(method, location, headers)
         def _chainResponse(newResponse):
             newResponse.setPreviousResponse(response)
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -2693,6 +2693,7 @@ class _RedirectAgentTestsMixin(testMixin
         code: int,
         crossScheme: bool = False,
         crossDomain: bool = False,
+        crossPort: bool = False,
         requestHeaders: Optional[Headers] = None,
     ) -> IRequest:
 
@@ -2723,17 +2724,22 @@ class _RedirectAgentTestsMixin(testMixin
         targetDomain = startDomain
         targetPort = startPort
 
-        if crossDomain:
+        if crossScheme:
             if ssl is None:
                 raise SkipTest(
                     "Cross-scheme redirects can't be tested without TLS support."
                 )
-            targetScheme = b"https" if startScheme == b"http" else b"https"
-            targetPort = 443 if startPort == 80 else 443
+            targetScheme = b"https" if startScheme == b"http" else b"http"
+            targetPort = 443 if startPort == 80 else 80
 
+        portSyntax = b''
+        if crossPort:
+            targetPort = 8443
+            portSyntax = b':8443'
         targetDomain = b"example.net" if crossDomain else startDomain
+        locationValue = targetScheme + b"://" + targetDomain + portSyntax + b"/bar"
         headers = http_headers.Headers(
-            {b"location": [targetScheme + b"://" + targetDomain + b"/bar"]}
+            {b"location": [locationValue]}
         )
         response = Response((b'HTTP', 1, 1), code, b'OK', headers, None)
         res.callback(response)
@@ -2778,9 +2784,10 @@ class _RedirectAgentTestsMixin(testMixin
         self._testRedirectDefault(307)
 
 
-    def test_headerSecurity(self):
+    def _sensitiveHeadersTest(self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict) -> None:
         """
-        L{client.RedirectAgent} scrubs sensitive headers when redirecting.
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing origins.
         """
         sensitiveHeaderValues = {
             b"authorization": [b"sensitive-authnz"],
@@ -2788,6 +2795,7 @@ class _RedirectAgentTestsMixin(testMixin
             b"cookie2": [b"sensitive-cookie2-data"],
             b"proxy-authorization": [b"sensitive-proxy-auth"],
             b"wWw-auThentiCate": [b"sensitive-authn"],
+            b"x-custom-sensitive": [b"sensitive-custom"],
         }
         otherHeaderValues = {b"x-random-header": [b"x-random-value"]}
         allHeaders = Headers({**sensitiveHeaderValues, **otherHeaderValues})
@@ -2807,18 +2815,38 @@ class _RedirectAgentTestsMixin(testMixin
 
         redirectedElsewhere = self._testRedirectDefault(
             301,
-            crossDomain=True,
+            **crossKwargs,
             requestHeaders=Headers({**sensitiveHeaderValues, **otherHeaderValues}),
         )
         otherOriginHeaders = normHeaders(redirectedElsewhere.headers)
         self.assertEquals(
             otherOriginHeaders,
             {
-                b"host": [b"example.net"],
+                b"host": [expectedHostHeader],
                 **normHeaders(Headers(otherHeaderValues)),
             },
         )
 
+    def test_crossDomainHeaders(self) -> None:
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing domains.
+        """
+        self._sensitiveHeadersTest(crossDomain=True, expectedHostHeader=b'example.net')
+
+    def test_crossPortHeaders(self) -> None:
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing ports.
+        """
+        self._sensitiveHeadersTest(crossPort=True, expectedHostHeader=b'example.com:8443')
+
+    def test_crossSchemeHeaders(self) -> None:
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing schemes.
+        """
+        self._sensitiveHeadersTest(crossScheme=True)
 
     def _testRedirectToGet(self, code, method):
         """
@@ -3045,7 +3073,9 @@ class RedirectAgentTests(TestCase, FakeR
         @return: a new L{twisted.web.client.RedirectAgent}
         """
         return client.RedirectAgent(
-            self.buildAgentForWrapperTest(self.reactor))
+            self.buildAgentForWrapperTest(self.reactor),
+            sensitiveHeaderNames=[b"X-Custom-sensitive"],
+        )
 
 
     def setUp(self):
@@ -3084,7 +3114,8 @@ class BrowserLikeRedirectAgentTests(Test
         @return: a new L{twisted.web.client.BrowserLikeRedirectAgent}
         """
         return client.BrowserLikeRedirectAgent(
-            self.buildAgentForWrapperTest(self.reactor))
+            self.buildAgentForWrapperTest(self.reactor),
+            sensitiveHeaderNames=[b"x-Custom-sensitive"])
 
 
     def setUp(self):
