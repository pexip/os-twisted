From: Wim Lewis <wiml@hhhh.org>
Date: Sun, 31 May 2020 19:44:29 -0700
Subject: Merge 9652-wiml-mktime: Allow mktime() to raise EOVERFLOW if isdst=1
 and there's no DST.

Author: wiml
Reviewer: hawkowl
Fixes: ticket:9652

The mktime() call in versions of glibc starting with 2.28 will return
EOVERFLOW if asked to interpret a tuple whose isdst field is 1 in
timezones that don't observe Daylight Savings Time. We now accept that
mktime() *either* ignores isdst in those timezones *or* raises
EOVERFLOW, both of which appear to be legal behavior.

Author: Wim Lewis <wiml@hhhh.org>
Origin: upstream, https://github.com/twisted/twisted/commit/9537671a8b507e46ca02af08f4e69e5462b69664
Last-Updated: 2021-02-13
---
 src/twisted/newsfragments/9652.misc |  1 +
 src/twisted/test/test_log.py        | 29 +++++++++++++++++++++--------
 2 files changed, 22 insertions(+), 8 deletions(-)
 create mode 100644 src/twisted/newsfragments/9652.misc

diff --git a/src/twisted/newsfragments/9652.misc b/src/twisted/newsfragments/9652.misc
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/src/twisted/newsfragments/9652.misc
@@ -0,0 +1 @@
+
diff --git a/src/twisted/test/test_log.py b/src/twisted/test/test_log.py
index 7852f65..281a3af 100644
--- a/src/twisted/test/test_log.py
+++ b/src/twisted/test/test_log.py
@@ -454,17 +454,29 @@ class FileObserverTests(LogPublisherTestCaseMixin,
             # The behavior of mktime depends on the current timezone setting.
             # So only do this after changing the timezone.
 
-            # Compute a POSIX timestamp for a certain date and time that is
-            # known to occur at a time when daylight saving time is in effect.
-            localDaylightTuple = (2006, 6, 30, 0, 0, 0, 4, 181, 1)
-            daylight = time.mktime(localDaylightTuple)
-
             # Compute a POSIX timestamp for a certain date and time that is
             # known to occur at a time when daylight saving time is not in
             # effect.
             localStandardTuple = (2007, 1, 31, 0, 0, 0, 2, 31, 0)
             standard = time.mktime(localStandardTuple)
 
+            # Compute a POSIX timestamp for a certain date and time that is
+            # known to occur at a time when daylight saving time is in effect.
+            localDaylightTuple = (2006, 6, 30, 0, 0, 0, 4, 181, 1)
+            try:
+                daylight = time.mktime(localDaylightTuple)
+            except OverflowError:
+                # mktime() may raise OverflowError if its tuple is
+                # inconsistent, although many implementations don't
+                # care. The implementation in glibc>=2.28 will raise
+                # if DST is indicated for a zone that doesn't have DST.
+                # We accept either behavior: ignoring the DST flag for those
+                # zones, or raising EOVERFLOW.
+                if daylightOffset == standardOffset:  # DST-less zone?
+                    daylight = standard
+                else:
+                    raise
+
             self.assertEqual(
                 (self.flo.getTimezoneOffset(daylight),
                  self.flo.getTimezoneOffset(standard)),
@@ -505,9 +517,10 @@ class FileObserverTests(LogPublisherTestCaseMixin,
         daylight saving time at all (so both summer and winter time test values
         should have the same offset).
         """
-        # Test a timezone that doesn't have DST.  mktime() implementations
-        # available for testing seem happy to produce results for this even
-        # though it's not entirely valid.
+        # Test a timezone that doesn't have DST.  Some mktime()
+        # implementations available for testing seem happy to produce
+        # results for this even though it's not entirely valid. Others
+        # such as glibc>=2.28 return EOVERFLOW.
         self._getTimezoneOffsetTest("Africa/Johannesburg", -7200, -7200)
 
 
