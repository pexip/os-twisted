From 2dbb85476c95580fced3199c296bdf25f6d85035 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Wed, 11 May 2022 00:02:30 -0700
Subject: [PATCH] generalize represents-eof detection

---
 src/twisted/protocols/tls.py | 26 +++++++++++++++-----------
 1 file changed, 15 insertions(+), 11 deletions(-)

diff --git a/src/twisted/protocols/tls.py b/src/twisted/protocols/tls.py
index a8333c46968..7c5b2b0f21f 100644
--- a/src/twisted/protocols/tls.py
+++ b/src/twisted/protocols/tls.py
@@ -41,18 +41,11 @@
     Connection,
     Context,
     Error,
-    TLSv1_METHOD,
+    SysCallError,
     WantReadError,
     ZeroReturnError,
 )
 
-try:
-    Connection(Context(TLSv1_METHOD), None)
-except TypeError as e:
-    if str(e) != "argument must be an int, or have a fileno() method.":
-        raise
-    raise ImportError("twisted.protocols.tls requires pyOpenSSL 0.10 or newer.")
-
 from zope.interface import directlyProvides, implementer, providedBy
 
 from twisted.internet._producer_helpers import _PullToPush
@@ -117,6 +110,19 @@ def stopProducing(self):
         self._producer.stopProducing()
 
 
+def _representsEOF(exceptionObject: Error) -> bool:
+    """
+    Does the given OpenSSL.SSL.Error represent an end-of-file?
+    """
+    reasonString: str
+    if isinstance(exceptionObject, SysCallError):
+        _, reasonString = exceptionObject.args
+    else:
+        errorQueue = exceptionObject.args[0]
+        _, _, reasonString = errorQueue[-1]
+    return reasonString.casefold().startswith("unexpected eof")
+
+
 @implementer(ISystemHandle, INegotiated)
 class TLSMemoryBIOProtocol(ProtocolWrapper):
     """
@@ -365,9 +371,7 @@ def _tlsShutdownFinished(self, reason):
             # Squash an EOF in violation of the TLS protocol into
             # ConnectionLost, so that applications which might run over
             # multiple protocols can recognize its type.
-            errorQueue = reason.value.args[0]
-            _, _, reasonString = errorQueue[-1]
-            if reasonString.startswith("unexpected eof"):
+            if _representsEOF(reason.value):
                 reason = Failure(CONNECTION_LOST)
         if self._reason is None:
             self._reason = reason
