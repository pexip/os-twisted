From 22f3cf6eab54a994b6e0e13f25782c391237bce8 Mon Sep 17 00:00:00 2001
From: Patrick Cloke <clokep@patrick.cloke.us>
Date: Tue, 23 Feb 2021 15:42:37 -0500
Subject: [PATCH] Stop using the deprecated int_from_bytes from cryptography.

---
 src/twisted/conch/newsfragments/10097.misc |  0
 src/twisted/conch/ssh/common.py            |  4 ++--
 src/twisted/conch/ssh/keys.py              | 10 +++++-----
 src/twisted/conch/ssh/transport.py         |  4 ++--
 4 files changed, 9 insertions(+), 9 deletions(-)
 create mode 100644 src/twisted/conch/newsfragments/10097.misc

diff --git a/src/twisted/conch/newsfragments/10097.misc b/src/twisted/conch/newsfragments/10097.misc
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/src/twisted/conch/ssh/common.py b/src/twisted/conch/ssh/common.py
index 3e4f8cdc792..8bb6a286c3b 100644
--- a/src/twisted/conch/ssh/common.py
+++ b/src/twisted/conch/ssh/common.py
@@ -12,7 +12,7 @@
 
 import struct
 
-from cryptography.utils import int_from_bytes, int_to_bytes
+from cryptography.utils import int_to_bytes
 
 from twisted.python.compat import unicode
 from twisted.python.deprecate import deprecated
@@ -69,7 +69,7 @@ def getMP(data, count=1):
     c = 0
     for i in range(count):
         length, = struct.unpack('>L', data[c:c + 4])
-        mp.append(int_from_bytes(data[c + 4:c + 4 + length], 'big'))
+        mp.append(int.from_bytes(data[c + 4:c + 4 + length], "big"))
         c += 4 + length
     return tuple(mp) + (data[c:],)
 
diff --git a/src/twisted/conch/ssh/keys.py b/src/twisted/conch/ssh/keys.py
index 8d5716c0fe1..4abb6cf0784 100644
--- a/src/twisted/conch/ssh/keys.py
+++ b/src/twisted/conch/ssh/keys.py
@@ -41,7 +41,7 @@
 from pyasn1.codec.ber import encoder as berEncoder
 
 from twisted.conch.ssh import common, sexpy
-from twisted.conch.ssh.common import int_from_bytes, int_to_bytes
+from twisted.conch.ssh.common import int_to_bytes
 from twisted.python import randbytes
 from twisted.python.compat import (
     iterbytes, long, izip, nativeString, unicode, _PY3,
@@ -1595,8 +1595,8 @@ def verify(self, signature, data):
             )
         elif keyType == 'DSA':
             concatenatedSignature = common.getNS(signature)[0]
-            r = int_from_bytes(concatenatedSignature[:20], 'big')
-            s = int_from_bytes(concatenatedSignature[20:], 'big')
+            r = int.from_bytes(concatenatedSignature[:20], "big")
+            s = int.from_bytes(concatenatedSignature[20:], "big")
             signature = encode_dss_signature(r, s)
             k = self._keyObject
             if not self.isPublic():
@@ -1606,8 +1606,8 @@ def verify(self, signature, data):
         elif keyType == 'EC':  # Pragma: no branch
             concatenatedSignature = common.getNS(signature)[0]
             rstr, sstr, rest = common.getNS(concatenatedSignature, 2)
-            r = int_from_bytes(rstr, 'big')
-            s = int_from_bytes(sstr, 'big')
+            r = int.from_bytes(rstr, "big")
+            s = int.from_bytes(sstr, "big")
             signature = encode_dss_signature(r, s)
 
             k = self._keyObject
diff --git a/src/twisted/conch/ssh/transport.py b/src/twisted/conch/ssh/transport.py
index 3e6bed7452a..a82a11a0a9f 100644
--- a/src/twisted/conch/ssh/transport.py
+++ b/src/twisted/conch/ssh/transport.py
@@ -35,7 +35,7 @@
 
 from twisted.conch.ssh import address, keys, _kex
 from twisted.conch.ssh.common import (
-    NS, getNS, MP, getMP, ffs, int_from_bytes
+    NS, getNS, MP, getMP, ffs
 )
 
 
@@ -51,7 +51,7 @@ def _mpFromBytes(data):
     @rtype: L{bytes}
     @return: The given data encoded as an SSH multiple-precision integer.
     """
-    return MP(int_from_bytes(data, 'big'))
+    return MP(int.from_bytes(data, "big"))
 
 
 
