From 4ae6732a30893178891ee3a383d8a737e0ec21eb Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:16:18 -0800
Subject: [PATCH] reblackening

---
 src/twisted/web/client.py          | 41 +++++++++++++++--------
 src/twisted/web/test/test_agent.py | 52 ++++++++++++++++--------------
 2 files changed, 55 insertions(+), 38 deletions(-)

--- a/src/twisted/web/client.py
+++ b/src/twisted/web/client.py
@@ -11,17 +11,23 @@ from __future__ import division, absolut
 import os
 import collections
 import warnings
+import zlib
 
-from urllib.parse import urljoin, urldefrag
-from urllib.parse import urlunparse as _urlunparse
 from typing import Iterable
+from urllib.parse import urldefrag, urljoin, urlunparse as _urlunparse
+
+from zope.interface import implementer
 
 from functools import wraps
 
-import zlib
 from twisted.python.compat import _PY3, networkString
 from twisted.python.compat import nativeString, intToBytes, unicode, itervalues
-from twisted.python.deprecate import deprecated, deprecatedModuleAttribute, getDeprecationWarningString
+from twisted.python.deprecate import (
+    deprecated,
+    deprecatedModuleAttribute,
+    getDeprecationWarningString,
+)
+
 from twisted.python.failure import Failure
 from incremental import Version
 
@@ -37,9 +43,14 @@ from twisted.web.http_headers import Hea
 from twisted.logger import Logger
 
 from twisted.web._newclient import _ensureValidURI, _ensureValidMethod
-from twisted.web.iweb import IAgent, IAgentEndpointFactory, IBodyProducer, IPolicyForHTTPS, IResponse, UNKNOWN_LENGTH
-from zope.interface import implementer
-
+from twisted.web.iweb import (
+    UNKNOWN_LENGTH,
+    IAgent,
+    IAgentEndpointFactory,
+    IBodyProducer,
+    IPolicyForHTTPS,
+    IResponse,
+)
 
 
 def urlunparse(parts):
@@ -2088,13 +2099,16 @@ class ContentDecoderAgent(object):
 
 
 _canonicalHeaderName = Headers()._canonicalNameCaps
-_defaultSensitiveHeaders = frozenset([
-    b"Authorization",
-    b"Cookie",
-    b"Cookie2",
-    b"Proxy-Authorization",
-    b"WWW-Authenticate",
-])
+_defaultSensitiveHeaders = frozenset(
+    [
+        b"Authorization",
+        b"Cookie",
+        b"Cookie2",
+        b"Proxy-Authorization",
+        b"WWW-Authenticate",
+    ]
+)
+
 
 @implementer(IAgent)
 class RedirectAgent(object):
@@ -2137,7 +2151,7 @@ class RedirectAgent(object):
     ):
         self._agent = agent
         self._redirectLimit = redirectLimit
-        sensitive = set(_canonicalHeaderName(each) for each in sensitiveHeaderNames)
+        sensitive = {_canonicalHeaderName(each) for each in sensitiveHeaderNames}
         sensitive.update(_defaultSensitiveHeaders)
         self._sensitiveHeaderNames = sensitive
 
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -4,18 +4,13 @@
 """
 Tests for L{twisted.web.client.Agent} and related new client APIs.
 """
-
+import zlib
 from io import BytesIO
-from twisted.test.iosim import FakeTransport, IOPump
-from twisted.test.proto_helpers import (
-    AccumulatingProtocol,
-    EventLoggingObserver,
-    MemoryReactorClock,
-    StringTransport,
-)
-from twisted.test.test_sslverify import certificatesForAuthorityAndServer
-from typing import Optional, TYPE_CHECKING
-from unittest import skipIf, SkipTest
+from typing import TYPE_CHECKING, Optional
+from unittest import SkipTest, skipIf
+
+from zope.interface.declarations import implementer
+from zope.interface.verify import verifyObject
 
 from twisted.trial.unittest import TestCase, SynchronousTestCase
 from twisted.web import client, error, http_headers
@@ -34,25 +29,34 @@ from twisted.internet.defer import Defer
 from twisted.internet.endpoints import TCP4ClientEndpoint
 from twisted.internet.address import IPv4Address, IPv6Address
 
+from twisted.test.iosim import FakeTransport, IOPump
+from twisted.test.proto_helpers import (
+    AccumulatingProtocol,
+    EventLoggingObserver,
+    MemoryReactorClock,
+    StringTransport,
+)
+from twisted.test.test_sslverify import certificatesForAuthorityAndServer
+
 from twisted.web.client import (
+    URI,
     FileBodyProducer,
     BrowserLikePolicyForHTTPS,
     Request,
-    HTTPConnectionPool,
     HostnameCachingHTTPSPolicy,
+    HTTPConnectionPool,
     ResponseDone,
     _HTTP11ClientFactory,
-    URI,
 )
 
 from twisted.web.iweb import (
+    UNKNOWN_LENGTH,
     IAgent,
     IBodyProducer,
     IPolicyForHTTPS,
     IRequest,
     IResponse,
     IAgentEndpointFactory,
-    UNKNOWN_LENGTH,
 )
 from twisted.web.http_headers import Headers
 from twisted.web._newclient import HTTP11ClientProtocol, Response
@@ -62,7 +66,6 @@ from twisted.web.iweb import IPolicyForH
 from twisted.python.deprecate import getDeprecationWarningString
 from incremental import Version
 
-import zlib
 from twisted.web.client import (BrowserLikePolicyForHTTPS,
                                 HostnameCachingHTTPSPolicy)
 from twisted.internet.test.test_endpoints import deterministicResolvingReactor
@@ -73,8 +76,6 @@ from twisted.web.test.injectionhelpers i
 )
 from twisted.web.error import SchemeNotSupported
 from twisted.logger import globalLogPublisher
-from zope.interface.declarations import implementer
-from zope.interface.verify import verifyObject
 
 
 try:
@@ -2732,15 +2733,13 @@ class _RedirectAgentTestsMixin(testMixin
             targetScheme = b"https" if startScheme == b"http" else b"http"
             targetPort = 443 if startPort == 80 else 80
 
-        portSyntax = b''
+        portSyntax = b""
         if crossPort:
             targetPort = 8443
-            portSyntax = b':8443'
+            portSyntax = b":8443"
         targetDomain = b"example.net" if crossDomain else startDomain
         locationValue = targetScheme + b"://" + targetDomain + portSyntax + b"/bar"
-        headers = http_headers.Headers(
-            {b"location": [locationValue]}
-        )
+        headers = http_headers.Headers({b"location": [locationValue]})
         response = Response((b'HTTP', 1, 1), code, b'OK', headers, None)
         res.callback(response)
 
@@ -2784,7 +2783,9 @@ class _RedirectAgentTestsMixin(testMixin
         self._testRedirectDefault(307)
 
 
-    def _sensitiveHeadersTest(self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict) -> None:
+    def _sensitiveHeadersTest(
+        self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict
+    ) -> None:
         """
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
         between differing origins.
@@ -2832,14 +2833,16 @@ class _RedirectAgentTestsMixin(testMixin
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
         between differing domains.
         """
-        self._sensitiveHeadersTest(crossDomain=True, expectedHostHeader=b'example.net')
+        self._sensitiveHeadersTest(crossDomain=True, expectedHostHeader=b"example.net")
 
     def test_crossPortHeaders(self) -> None:
         """
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
         between differing ports.
         """
-        self._sensitiveHeadersTest(crossPort=True, expectedHostHeader=b'example.com:8443')
+        self._sensitiveHeadersTest(
+            crossPort=True, expectedHostHeader=b"example.com:8443"
+        )
 
     def test_crossSchemeHeaders(self) -> None:
         """
