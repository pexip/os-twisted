From ff8c2b1fbfed3e337a28b96c9570046d2d66116e Mon Sep 17 00:00:00 2001
From: Ilya Skriblovsky <IlyaSkriblovsky@gmail.com>
Date: Thu, 19 Mar 2020 01:00:58 +0300
Subject: [PATCH] Fix AsyncioSelectorReactor.callLater().reset() and fix memory
 leaks

---
 src/twisted/internet/asyncioreactor.py        | 49 +++++++------
 .../internet/test/test_asyncioreactor.py      | 71 +++++++++++++++++++
 src/twisted/newsfragments/9780.bugfix         |  1 +
 3 files changed, 98 insertions(+), 23 deletions(-)
 create mode 100644 src/twisted/newsfragments/9780.bugfix

diff --git a/src/twisted/internet/asyncioreactor.py b/src/twisted/internet/asyncioreactor.py
index a2896fb6851..4f8aa5a08fd 100644
--- a/src/twisted/internet/asyncioreactor.py
+++ b/src/twisted/internet/asyncioreactor.py
@@ -13,7 +13,6 @@
 from zope.interface import implementer
 
 from twisted.logger import Logger
-from twisted.internet.base import DelayedCall
 from twisted.internet.posixbase import (PosixReactorBase, _NO_FILEDESC,
                                         _ContinuousPolling)
 from twisted.python.log import callWithLogger
@@ -64,8 +63,11 @@ def __init__(self, eventloop=None):
         self._asyncioEventloop = eventloop
         self._writers = {}
         self._readers = {}
-        self._delayedCalls = set()
         self._continuousPolling = _ContinuousPolling(self)
+
+        self._scheduledAt = None
+        self._timerHandle = None
+
         super().__init__()
 
 
@@ -252,10 +254,6 @@ def getWriters(self):
                 self._continuousPolling.getWriters())
 
 
-    def getDelayedCalls(self):
-        return list(self._delayedCalls)
-
-
     def iterate(self, timeout):
         self._asyncioEventloop.call_later(timeout + 0.01,
                                           self._asyncioEventloop.stop)
@@ -283,24 +281,29 @@ def seconds(self):
         return self._asyncioEventloop.time()
 
 
+    def _onTimer(self):
+        self._scheduledAt = None
+        self.runUntilCurrent()
+        self._reschedule()
+
+    def _reschedule(self):
+        timeout = self.timeout()
+        if timeout is not None:
+            abs_time = self._asyncioEventloop.time() + timeout
+            self._scheduledAt = abs_time
+            if self._timerHandle is not None:
+                self._timerHandle.cancel()
+            self._timerHandle = self._asyncioEventloop.call_at(abs_time, self._onTimer)
+
+    def _moveCallLaterSooner(self, tple):
+        PosixReactorBase._moveCallLaterSooner(self, tple)
+        self._reschedule()
+
     def callLater(self, seconds, f, *args, **kwargs):
-        def run():
-            dc.called = True
-            self._delayedCalls.remove(dc)
-            f(*args, **kwargs)
-        handle = self._asyncioEventloop.call_later(seconds, run)
-        dchandle = _DCHandle(handle)
-
-        def cancel(dc):
-            self._delayedCalls.remove(dc)
-            dchandle.cancel()
-
-        def reset(dc):
-            dchandle.handle = self._asyncioEventloop.call_at(dc.time, run)
-
-        dc = DelayedCall(self.seconds() + seconds, run, (), {},
-                         cancel, reset, seconds=self.seconds)
-        self._delayedCalls.add(dc)
+        dc = PosixReactorBase.callLater(self, seconds, f, *args, *kwargs)
+        abs_time = self._asyncioEventloop.time() + self.timeout()
+        if self._scheduledAt is None or abs_time < self._scheduledAt:
+            self._reschedule()
         return dc
 
 
diff --git a/src/twisted/internet/test/test_asyncioreactor.py b/src/twisted/internet/test/test_asyncioreactor.py
index 32bfe78b4d9..8d48b48c00e 100644
--- a/src/twisted/internet/test/test_asyncioreactor.py
+++ b/src/twisted/internet/test/test_asyncioreactor.py
@@ -4,6 +4,7 @@
 """
 Tests for L{twisted.internet.asyncioreactor}.
 """
+import gc
 
 from twisted.trial.unittest import SynchronousTestCase
 from .reactormixins import ReactorBuilder
@@ -46,3 +47,73 @@ def completed(future):
         self.assertEqual(result, [])
         self.runReactor(reactor, timeout=1)
         self.assertEqual(result, [True])
+
+
+    def test_delayedCallResetToLater(self):
+        """
+        L{DelayedCall.reset()} properly reschedules timer to later time
+        """
+        reactor = AsyncioSelectorReactor()
+
+        timer_called_at = [None]
+
+        def on_timer():
+            timer_called_at[0] = reactor.seconds()
+
+        start_time = reactor.seconds()
+        dc = reactor.callLater(0, on_timer)
+        dc.reset(0.5)
+        reactor.callLater(1, reactor.stop)
+        reactor.run()
+
+        self.assertIsNotNone(timer_called_at[0])
+        self.assertGreater(timer_called_at[0] - start_time, 0.4)
+
+
+    def test_delayedCallResetToEarlier(self):
+        """
+        L{DelayedCall.reset()} properly reschedules timer to earlier time
+        """
+        reactor = AsyncioSelectorReactor()
+
+        timer_called_at = [None]
+
+        def on_timer():
+            timer_called_at[0] = reactor.seconds()
+
+        start_time = reactor.seconds()
+        dc = reactor.callLater(0.5, on_timer)
+        dc.reset(0)
+        reactor.callLater(1, reactor.stop)
+
+        import io
+        from contextlib import redirect_stderr
+        stderr = io.StringIO()
+        with redirect_stderr(stderr):
+            reactor.run()
+
+        self.assertEqual(stderr.getvalue(), '')
+        self.assertIsNotNone(timer_called_at[0])
+        self.assertLess(timer_called_at[0] - start_time, 0.4)
+
+
+    def test_noCycleReferencesInCallLater(self):
+        """
+        L{AsyncioSelectorReactor.callLater()} doesn't leave cyclic references
+        """
+        gc_was_enabled = gc.isenabled()
+        gc.disable()
+        try:
+            objects_before = len(gc.get_objects())
+            timer_count = 1000
+
+            reactor = AsyncioSelectorReactor()
+            for _ in range(timer_count):
+                reactor.callLater(0, lambda: ...)
+            reactor.runUntilCurrent()
+
+            objects_after = len(gc.get_objects())
+            self.assertLess((objects_after - objects_before) / timer_count, 1)
+        finally:
+            if gc_was_enabled:
+                gc.enable()
diff --git a/src/twisted/newsfragments/9780.bugfix b/src/twisted/newsfragments/9780.bugfix
new file mode 100644
index 00000000000..6706db2f561
--- /dev/null
+++ b/src/twisted/newsfragments/9780.bugfix
@@ -0,0 +1 @@
+DelayedCall.reset() is now working properly with asyncioreactor
